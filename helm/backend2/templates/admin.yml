{{ $labelData := dict "Values" .Values "Release" .Release "Chart" .Chart "Component" "admin" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend2.adminName" . }}
  labels:
    {{- include "backend2.labels" $labelData | nindent 4 }}
spec:
  replicas: {{ .Values.admin.replicaCount }}
  selector:
    matchLabels:
      {{- include "backend2.selectorLabels" $labelData | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      name: {{ include "backend2.adminName" . }}
      labels:
        {{- include "backend2.selectorLabels" $labelData | nindent 8 }}
        environment: {{ .Values.env }}
    spec:
      initContainers:
        - name: init-container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['python', 'manage.py', 'migrate_schemas', '--executor', 'multiprocessing']
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "backend2.name" . }}
            - secretRef:
                name: {{ include "backend2.secretsName" . }}
          env:
            - name: RUN_AS_ADMIN_APP
              value: "True"
            - name: DB_HOST_REPLICA
              value: ""
      containers:
        - name: {{ include "backend2.adminName" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          command:
            - /start-admin.sh
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /app-data
              name: pleio-data
              readOnly: true
            - mountPath: /backup-storage
              name: backup-storage
          envFrom:
            - configMapRef:
                name: {{ include "backend2.name" . }}
            - secretRef:
                name: {{ include "backend2.secretsName" . }}
          env:
            - name: RUN_AS_ADMIN_APP
              value: "True"
            - name: DB_HOST_REPLICA
              value: ""
          resources:
            {{- toYaml .Values.admin.resources | nindent 12 }}
        {{- if .Values.tunnel.hostname }}
        - name: tunnel
          image: "{{ .Values.tunnel.repository }}:{{ .Values.tunnel.tag }}"
          args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
          - name: cloudflared-config
            mountPath: /etc/cloudflared/config
            readOnly: true
          - name: cloudflared-creds
            mountPath: /etc/cloudflared/creds
            readOnly: true
        {{- end }}
      volumes:
        - name: pleio-data
          {{- if eq .Values.storage.type "hostpath" }}
          hostPath:
            path: {{ .Values.storage.existingDataStorage }}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "backend2.dataStorageName" . }}
          {{- end }}
        - name: backup-storage
          {{- if eq .Values.storage.type "hostpath" }}
          hostPath:
            path: {{ .Values.storage.existingBackupStorage }}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "backend2.backupStorageName" . }}
          {{- end }}
        {{- if .Values.tunnel.hostname }}
        - name: cloudflared-creds
          secret:
            secretName: {{ include "backend2.tunnelCredentials" . }}
        - name: cloudflared-config
          configMap:
            name: {{ printf "%s-cloudflared" (include "backend2.name" .) }}
            items:
            - key: config.yaml
              path: config.yaml
        {{- end }}
