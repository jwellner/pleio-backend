stages:
  - test
  - build
  - deploy

variables:
  TAG_PREFIX: ""
  SECRET_KEY: bg9kU6ckKXTLQeZxtovc
  POSTGRES_PASSWORD: postgres
  DB_HOST: postgres
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_NAME: postgres
  ENV: test
  DEBUG: "True"
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  ELASTICSEARCH_URL: http://elasticsearch:9200
  ELASTICSEARCH_HOST: http://elasticsearch:9200
  CELERY_TASK_ALWAYS_EAGER: "True"

.python:
  image: python:3.9.10
  tags:
    - backend2
  before_script:
    - apt-get update && apt-get install --no-install-recommends -y pandoc
    - pip install -r requirements.txt

.python-test:
  services:
    - postgres:12.12-alpine
    - name: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
      alias: elasticsearch
      variables:
        discovery.type: single-node
        bootstrap.memory_lock: 'true'
        ES_JAVA_OPTS: -Xms1024m -Xmx1024m

cache:
  paths:
  - $PIP_CACHE_DIR

prospector:
  stage: test
  extends:
    - .python
  script:
    - prospector -X

test:
  stage: test
  extends:
    - .python
    - .python-test
  coverage: '/TOTAL.*\s+(\d+%)/'
  script:
    - curl "http://elasticsearch:9200/_cat/health"
    - mkdir -p static static-frontend
    - touch static-frontend/web.css static-frontend/vendor.js static-frontend/web.js
    - python manage.py collectstatic --noinput
    - coverage run --source='.' manage.py test --failfast --timing --parallel 1
    - coverage report

scan:
  stage: test
  tags:
    - shell
  script:
    - DOCKER_BUILDKIT=1 docker build -t ${CI_REGISTRY_IMAGE}:${TAG_PREFIX}${CI_COMMIT_SHORT_SHA} .
    - scan.sh ${CI_REGISTRY_IMAGE}:${TAG_PREFIX}${CI_COMMIT_SHORT_SHA}

build:
  stage: build
  tags:
    - shell
  only:
    - dev
    - master
  script:
    - DOCKER_BUILDKIT=1 docker build -t ${CI_REGISTRY_IMAGE}:${TAG_PREFIX}${CI_COMMIT_SHORT_SHA} .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}:${TAG_PREFIX}${CI_COMMIT_SHORT_SHA}
    - |-
        if [[ $CI_COMMIT_BRANCH == "master" ]]; then
          docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:latest
          docker push ${CI_REGISTRY_IMAGE}:latest
        fi

build feature:
  extends:
    - build
  variables:
    TAG_PREFIX: feature-
  only:
      - /^feature-(.*)$/

.helm_deploy:
  stage: deploy
  script:
    - FRONTEND_TAG=$(kubectl get  -n pleio2 deployment ${HELM_NAME}-api -o=jsonpath='{.spec.template.spec.initContainers[0].image}' | grep -oP '(?<=:).+')
    - helm dependency update helm/backend2
    - |
      helm upgrade --install -n pleio2 -f ${HELM_VALUES_FILE} \
        --set image.tag=${TAG_PREFIX}${CI_COMMIT_SHORT_SHA} \
        --set frontend.tag=${FRONTEND_TAG} \
        ${HELM_NAME} helm/backend2

ODCN Review:
  tags:
    - control-odc
  only:
    - /^feature-(.*)$/
  variables:
    HELM_NAME: backend2-review
    HELM_VALUES_FILE: helm/backend2/values.odcn.review.yaml
    TAG_PREFIX: feature-
  extends:
    - .helm_deploy

ODCN Test:
  tags:
    - control-odc
  only:
    - dev
  variables:
    HELM_NAME: backend2-test
    HELM_VALUES_FILE: helm/backend2/values.odcn.test.yaml
  extends:
    - .helm_deploy

ODCN Prod:
  tags:
    - control-odc
  only:
    - master
  when: manual
  variables:
    HELM_NAME: backend2
    HELM_VALUES_FILE: helm/backend2/values.odcn.prod.yaml
  extends:
    - .helm_deploy
