type SiteAccessRequest {
  name: String!
  email: String!
}

type SiteAccessRequestList {
  edges: [SiteAccessRequest]
}

type DeleteAccountRequestList {
  edges: [User]
}

input handleSiteAccessRequestInput {
  email: String!
  """Set true to accept or false to deny."""
  accept: Boolean!
  """Silently deny or accept. When set to true no email will be send to the user."""
  silent: Boolean
}

type handleSiteAccessRequestPayload {
  success: Boolean
}

input handleDeleteAccountRequestInput {
  guid: String!
  """Set true to accept or false to deny."""
  accept: Boolean!
}

type handleDeleteAccountRequestPayload {
  success: Boolean
}

input deleteUserInput {
  guid: String!
}

input toggleUserRoleInput {
  guid: String!
  role: String!
}

input toggleUserIsBannedInput {
  guid: String!
}

type deleteUserPayload {
  success: Boolean
}

type toggleUserRolePayload {
  success: Boolean
}

type toggleUserIsBannedPayload {
  success: Boolean
}

input inviteToSiteInput {

  """A list of email addresses to invite to site."""
  emailAddresses: [String!]

  """Message in email sent with invite"""
  message: String
}

type inviteToSitePayload {
  success: Boolean
}

input revokeInviteToSiteInput {

  """A list of email addresses to revoke invite for."""
  emailAddresses: [String!]
}

type revokeInviteToSitePayload {
  success: Boolean
}

type SiteInvite {
  email: String
}

type SiteInviteList {
  edges: [SiteInvite]
}

type SiteUserList {
  total: Int!
  edges: [User]
}

input importUsersStep1Input {

  """A list of email addresses to revoke invite for."""
  usersCsv: Upload!
}

type importUsersStep1Payload {
  """
    - csvColumns, columns of the uploaded csv
    - userFields, fields of users
    - accessIds, integers of access level for field
  """
  importId: String!
  csvColumns: [String]
  userFields: [Option]
  accessIdOptions: [OptionInteger]
}

input importUsersStep2Input {

  """Start a background process for creating/updating users"""
  importId: String!
  fields: [ImportUserFieldInput!]
}

type importUsersStep2Payload {
  success: Boolean
}

input ImportUserFieldInput {
  csvColumn: String!
  userField: String!
  accessId: Int
  forceAccess: Boolean
}

extend type Mutation {
  deleteUser(input: deleteUserInput!): deleteUserPayload
  toggleUserRole(input: toggleUserRoleInput!): toggleUserRolePayload
  toggleUserIsBanned(input: toggleUserIsBannedInput!): toggleUserIsBannedPayload
  addSiteSettingProfileField(input: addSiteSettingProfileFieldInput!): addSiteSettingProfileFieldPayload
  editSiteSettingProfileField(input: editSiteSettingProfileFieldInput!): editSiteSettingProfileFieldPayload
  deleteSiteSettingProfileField(input: deleteSiteSettingProfileFieldInput!): deleteSiteSettingProfileFieldPayload
  """Create and send invitation by email to join a site."""
  inviteToSite(input: inviteToSiteInput!): inviteToSitePayload
  """Remove invitation to join a site."""
  revokeInviteToSite(input: revokeInviteToSiteInput!): revokeInviteToSitePayload
  """Handle access request"""
  handleSiteAccessRequest(input: handleSiteAccessRequestInput!): handleSiteAccessRequestPayload
  """Handle delete account request"""
  handleDeleteAccountRequest(input: handleDeleteAccountRequestInput!): handleDeleteAccountRequestPayload
  """User import step 1"""
  importUsersStep1(input: importUsersStep1Input!): importUsersStep1Payload
  """User import step 2, will be scheduled in background, performer will receive a mail with import results. """
  importUsersStep2(input: importUsersStep2Input!): importUsersStep2Payload
  """Add profileFieldValidator"""
  addSiteSettingProfileFieldValidator(input: addSiteSettingProfileFieldValidatorInput!): addSiteSettingProfileFieldValidatorPayload
  """Edit profileFieldValidator"""
  editSiteSettingProfileFieldValidator(input: editSiteSettingProfileFieldValidatorInput!): editSiteSettingProfileFieldValidatorPayload
  """Delete profileFieldValidator"""
  deleteSiteSettingProfileFieldValidator(input: deleteSiteSettingProfileFieldValidatorInput!): deleteSiteSettingProfileFieldValidatorPayload
  """Add attachment to content"""
  addAttachment(input: addAttachmentInput!): addAttachmentPayload
}

extend type Query {
  siteUsers(q: String, role: String, isDeleteRequested: Boolean, isBanned: Boolean, offset: Int, limit: Int, lastOnlineBefore: String): SiteUserList
  usersByBirthDate(profileFieldGuid: String!, futureDays: Int, offset: Int, limit: Int): SiteUserList
}

extend type User {
  roles: [String]
}

extend type GroupNotificationItem {
  """ If notification for group for user is enabled, the notification mode is used sending the notification by email. 'overview': notification in overview. 'direct': every notification a direct email """
  notificationMode: String
}

extend type Group {
  notificationMode: String
}

extend input editGroupNotificationsInput {
  notificationMode: String
}

input addSiteSettingProfileFieldInput {
  key: String
  name: String!
  isEditable: Boolean
  isFilter: Boolean
  isInOverview: Boolean
  fieldType: String!
  fieldOptions: [String]
  isInOnboarding: Boolean
  isMandatory: Boolean
  profileFieldValidatorId: String
}

type addSiteSettingProfileFieldPayload {
  profileItem: ProfileItem
}

input editSiteSettingProfileFieldInput {
  guid: String!
  name: String
  key: String
  isEditable: Boolean
  isFilter: Boolean
  isInOverview: Boolean
  fieldType: String
  fieldOptions: [String]
  isInOnboarding: Boolean
  isMandatory: Boolean
  profileFieldValidatorId: String
}

type editSiteSettingProfileFieldPayload {
  profileItem: ProfileItem
}

input deleteSiteSettingProfileFieldInput {
  guid: String!
}

type deleteSiteSettingProfileFieldPayload {
    success: Boolean
}

extend type ProfileItem {
  guid: String!
  isInOnboarding: Boolean
  isMandatory: Boolean
  profileFieldValidator: ProfileFieldValidator
}

type ProfileSection {
  name: String!
  profileFieldGuids: [String]
}

extend input editSiteSettingInput {
  redirects: [RedirectInput]
  """users with email adress in domain of directRegistrationDomains, can register even when allowRegistration is False"""
  directRegistrationDomains: [String]
  profileSections: [ProfileSectionInput]
  onboardingEnabled: Boolean
  enableSearchEngineIndexing: Boolean
  onboardingForceExistingUsers: Boolean
  onboardingIntro: String
  limitedGroupAdd: Boolean
  cookieConsent: Boolean
  eventTiles: Boolean
  loginIntro: String
  profileSyncEnabled: Boolean
  profileSyncToken: String
  customCss: String
  walledGardenByIpEnabled: Boolean
  whitelistedIpRanges: [String]
  siteMembershipAcceptedIntro: String
  siteMembershipDeniedIntro: String
  idpId: String
  idpName: String
  flowEnabled: Boolean
  flowSubtypes: [String]
  flowAppUrl: String
  flowToken: String
  flowCaseId: Int
  flowUserGuid: String
  iconAlt: String
}

input ProfileSectionInput {
  name: String!
  profileFieldGuids: [String]
}
type ExportableField {
  field_type: String!
  field: String!
  label: String!
}

extend input editEntityInput {
  timeCreated: String
  groupGuid: String
  ownerGuid: String
}

extend type Site {
  profileSections: [ProfileSection]
  profileFields: [ProfileItem]
  onboardingEnabled: Boolean!
  onboardingIntro: String
}

type Redirect {
  source: String!
  destination: String!
}

"""source and destination must start with /"""
input RedirectInput {
  source: String!
  destination: String!
}

extend type SiteSettings {
  redirects: [Redirect]
  directRegistrationDomains: [String]
  profileSections: [ProfileSection]
  exportableUserFields: [ExportableField]
  exportableContentTypes: [Option]
  profileFields: [ProfileItem]
  limitedGroupAdd: Boolean!
  onboardingEnabled: Boolean!
  onboardingForceExistingUsers: Boolean!
  onboardingIntro: String
  siteInvites: SiteInviteList
  siteAccessRequests: SiteAccessRequestList
  cookieConsent: Boolean!
  eventTiles: Boolean!
  loginIntro: String
  roleOptions: [Option]
  deleteAccountRequests: DeleteAccountRequestList
  profileSyncEnabled: Boolean!
  profileSyncToken: String
  customCss: String
  walledGardenByIpEnabled: Boolean!
  whitelistedIpRanges: [String]
  siteMembershipAcceptedIntro: String
  siteMembershipDeniedIntro: String
  idpId: String
  idpName: String
  enableSearchEngineIndexing: Boolean!
  profileFieldValidators: [ProfileFieldValidator]
  flowEnabled: Boolean!
  flowSubtypes: [String]
  flowAppUrl: String
  flowToken: String
  flowCaseId: Int
  flowUserGuid: String
  iconAlt: String
}

extend input FeaturedInput {
  alt: String
}

extend input sendMessageToUserInput {
  sendCopyToSender: Boolean
}

input ProfileFieldValidatorInput {
  type: ProfileFieldValidatorType!
  name: String!
  validationString: String
  validationListFile: Upload
}

type ProfileFieldValidator {
  id: String!
  type: ProfileFieldValidatorType!
  name: String!
  validationString: String
  validationList: [String]
}

enum ProfileFieldValidatorType {
  inList
}

input addSiteSettingProfileFieldValidatorInput {
  type: ProfileFieldValidatorType!
  name: String!
  validationString: String
  validationListFile: Upload
}

input editSiteSettingProfileFieldValidatorInput {
  id: String!
  name: String
  validationString: String
  validationListFile: Upload
}

input deleteSiteSettingProfileFieldValidatorInput {
  id: String!
}

type addSiteSettingProfileFieldValidatorPayload {
  profileFieldValidator: ProfileFieldValidator
}

type editSiteSettingProfileFieldValidatorPayload {
  profileFieldValidator: ProfileFieldValidator
}

type deleteSiteSettingProfileFieldValidatorPayload {
  success: Boolean!
}

type Attachment {
  id: String
  mimeType: String
  url: String
  name: String 
}

input addAttachmentInput {
  contentGuid: String!
  file: Upload!
}

type addAttachmentPayload {
  attachment: Attachment
}
