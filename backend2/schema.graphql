scalar DateTime
scalar SecureRichText

input acceptGroupInvitationInput {
    """The unique invite code."""
    code: String
}

type acceptGroupInvitationPayload {
    group: Group
}

type Tag {
    label: String!
    synonyms: [String]
}

input tagMergeInput {
    tag: String!
    synonym: String!
}

input acceptMembershipRequestInput {
    """The guid of the user."""
    userGuid: String

    """The guid of the group."""
    groupGuid: String
}

type acceptMembershipRequestPayload {
    group: Group
}

type AccessId {
    id: Int!
    description: String!
}

type Activity {
    guid: String!
    type: ActivityType!
    entity: Entity!
}

type ActivityFilter {
    contentTypes: [KeyValueItem]!
}

type ActivityList {
    total: Int!
    edges: [Activity]
}

"""The type of activity"""
enum ActivityType {
    create
    update
}

input addColumnInput {
    position: Int!
    containerGuid: String!
    parentGuid: String!
    width: [Int]
}

type addColumnPayload {
    column: Column
}

type EventSlot {
    name: String
    subEventGuids: [String]
    alreadySignedUpInSlot: Boolean
}

input EventSlotInput {
    name: String
    subEventGuids: [String]
}

input addEntityInput {
    """deprecated: use subtype"""
    type: Type
    subtype: String!
    title: String
    abstract: String
    richDescription: SecureRichText
    isRecommended: Boolean
    isFeatured: Boolean
    attendEventWithoutAccount: Boolean
    featured: FeaturedInput
    startDate: DateTime
    endDate: DateTime
    source: String
    location: String
    locationLink: String
    locationAddress: String
    ticketLink: String
    maxAttendees: String
    rsvp: Boolean
    containerGuid: String
    accessId: Int
    writeAccessId: Int
    tags: [String]
    mentions: [String]
    timePublished: DateTime
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    qrAccess: Boolean
    relatedItems: [String]
}

type addEntityPayload {
    entity: Entity
}

input addFileInput {
    containerGuid: String
    file: Upload
    richDescription: SecureRichText
    accessId: Int
    writeAccessId: Int
    tags: [String]
}

type addFilePayload {
    entity: Entity
}

input addGroupInput {
    name: String
    icon: Upload
    featured: FeaturedInput
    isClosed: Boolean

    """
    True when membership has to be requested by the user, False when every user can join the group.
    """
    isMembershipOnRequest: Boolean
    isFeatured: Boolean
    autoNotification: Boolean
    isLeavingGroupDisabled: Boolean
    isAutoMembershipEnabled: Boolean
    isSubmitUpdatesEnabled: Boolean
    richDescription: SecureRichText
    introduction: String
    isIntroductionPublic: Boolean
    isHidden: Boolean
    welcomeMessage: String
    tags: [String]
    plugins: [Plugins]
    showMemberProfileFieldGuids: [String]
    requiredProfileFieldsMessage: String
    requiredProfileFieldGuids: [String]
}

type addGroupPayload {
    group: Group
}

input addGroupWidgetInput {
    groupGuid: String!
    position: Int!
    type: String!
    settings: [WidgetSettingInput]
}

type addGroupWidgetPayload {
    entity: Widget
}

input addImageInput {
    image: Upload!
}

type addImagePayload {
    file: FileFolder
}

input addPageInput {
    title: String
    richDescription: SecureRichText
    pageType: String
    containerGuid: String
    accessId: Int
    tags: [String]
}

type addPagePayload {
    entity: Entity
}

input addPollInput {
    title: String!
    choices: [String]!
    accessId: Int
}

type addPollPayload {
    entity: Entity!
}

input addRowInput {
    position: Int!
    containerGuid: String!
    parentGuid: String!
    isFullWidth: Boolean!
}

type addRowPayload {
    row: Row
}

input addSubgroupInput {
    name: String
    groupGuid: String
    members: [String]
}

type addSubgroupPayload {
    success: Boolean
}

input addWidgetInput {
    position: Int!
    containerGuid: String!
    parentGuid: String!
    type: String!
    settings: [WidgetSettingInput]
}

type addWidgetPayload {
    widget: Widget
}

type Attendee {
    guid: String
    name: String
    email: String!
    state: String!
    timeCheckedIn: DateTime
    url: String
    icon: String
}

type AttendeesList {
    total: Int
    edges: [Attendee]

    totalCheckedIn: Int

    totalAccept: Int
    totalAcceptNotCheckedIn: Int
    totalWaitinglist: Int
    totalWaitinglistNotCheckedIn: Int

    totalMaybe: Int
    totalReject: Int
}

input attendEventInput {
    guid: String
    state: String
}

type attendEventPayload {
    entity: Event
}

input attendEventWithoutAccountInput {
    guid: String!
    name: String!
    email: String!
    resend: Boolean
}

type attendEventWithoutAccountPayload {
    entity: Event
}

enum StatusPublished {
    draft
    published
    archived
}

type Blog implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    abstract: String
    description: String
    richDescription: SecureRichText
    inGroup: Boolean
    group: Group
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    isFeatured: Boolean
    isHighlighted: Boolean
    isRecommended: Boolean
    featured: Featured
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
    isPinned: Boolean!
    relatedItems: EntityList
    revision: Revision
}

input bookmarkInput {
    """The guid of the entity to bookmark."""
    guid: String!

    """True when adding, false when removing."""
    isAdding: Boolean!
}

type bookmarkPayload {
    object: Entity!
    isFirstBookmark: Boolean!
}

input changeGroupRoleInput {
    """The group guid."""
    guid: String

    """The user guid."""
    userGuid: String

    """The new role for the user."""
    role: Role
}

type changeGroupRolePayload {
    group: Group
}

type Column {
    guid: String!
    containerGuid: String!
    width: [Int]
    parentGuid: String!
    position: Int!
    canEdit: Boolean!
}

type Comment implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    description: String
    richDescription: SecureRichText
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    canEdit: Boolean!
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    hasVoted: Boolean
    votes: Int
    isBestAnswer: Boolean
    owner: User
    ownerName: String
    canComment: Boolean
    comments: [Comment]
    commentCount: Int
}

"""Confirm of event attendance, for users without an account. Delete option wil remove attendee from event (default=false)"""
input confirmAttendEventWithoutAccountInput {
    guid: String!
    email: String!
    code: String!,
    delete: Boolean,
    state: String
}

type confirmAttendEventWithoutAccountPayload {
    entity: Event
}

input copyEntityInput {
    guid: String!
    ownerGuid: String!
    subtype: String!
    copySubevents: Boolean
}

type copyEntityPayload {
    entity: Entity
}


input deleteColumnInput {
    guid: String!
}

type deleteColumnPayload {
    success: Boolean
}

input deleteEntityInput {
    guid: String!
}

type deleteEntityPayload {
    success: Boolean
}

type archiveEntityPayload {
    success: Boolean
}

"""Edit attendee of event"""
input editEventAttendeeInput {
    """Event guid"""
    guid: String!
    """Email addresses of attendee to edit"""
    emailAddress: String!
    """Fields than can be edited"""
    timeCheckedIn: DateTime
}

type editEventAttendeePayload {
    entity: Event
}

"""Remove attendees from event"""
input deleteEventAttendeesInput {
    """Event guid"""
    guid: String!
    """Email addresses of attendees to be removed"""
    emailAddresses: [String!]
}

type deleteEventAttendeesPayload {
    entity: Event
}

input deleteGroupInvitationInput {
    """The id of the invitation to delete."""
    id: Int
}

type deleteGroupInvitationPayload {
    group: Group
}

input deleteRowInput {
    guid: String!
}

type deleteRowPayload {
    success: Boolean
}

input deleteSubgroupInput {
    id: Int
}

type deleteSubgroupPayload {
    success: Boolean
}

input deleteWidgetInput {
    guid: String!
}

type deleteWidgetPayload {
    success: Boolean
}

type DirectLink {
    title: String!
    link: String!
}

input DirectLinkInput {
    title: String!
    link: String!
}

type Discussion implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    abstract: String
    description: String
    richDescription: SecureRichText
    inGroup: Boolean
    group: Group
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFeatured: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
    featured: Featured
    isPinned: Boolean!
}

input editAvatarInput {
    guid: String!

    """UploadFile"""
    avatar: Upload!
}

type editAvatarPayload {
    user: User
}

input editColumnInput {
    guid: String!
    parentGuid: String
    position: Int
    width: [Int]
}

type editColumnPayload {
    column: Column
}

input editEmailOverviewInput {
    guid: String
    frequency: Frequency
    tags: [String]
}

type editEmailOverviewPayload {
    user: User
}

input editEntityInput {
    guid: String!
    title: String
    abstract: String
    richDescription: SecureRichText
    isRecommended: Boolean
    isFeatured: Boolean
    attendEventWithoutAccount: Boolean
    featured: FeaturedInput
    startDate: DateTime
    endDate: DateTime
    source: String
    location: String
    locationLink: String
    locationAddress: String
    ticketLink: String
    slotsAvailable: [EventSlotInput]
    maxAttendees: String
    rsvp: Boolean
    accessId: Int
    containerGuid: String
    writeAccessId: Int
    tags: [String]
    mentions: [String]
    timeCreated: DateTime
    timePublished: DateTime
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    groupGuid: String
    ownerGuid: String
    qrAccess: Boolean
    relatedItems: [String]
}

type editEntityPayload {
    entity: Entity
}

enum UpdateOwnerRecursive {
    updateOwnerFiles
    updateAllFiles
}

input editFileFolderInput {
    guid: String
    title: String
    file: Upload
    richDescription: SecureRichText
    accessId: Int
    writeAccessId: Int
    isAccessRecursive: Boolean
    tags: [String]
    timePublished: DateTime
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    ownerGuid: String
    ownerGuidRecursive: UpdateOwnerRecursive
}

type editFileFolderPayload {
    entity: Entity
}

input editGroupInput {
    guid: String
    name: String
    icon: Upload
    featured: FeaturedInput

    """
    True when membership has to be requested by the user, False when every user can join the group.
    """
    isClosed: Boolean

    """
    True when membership has to be requested by the user, False when every user can join the group.
    """
    isMembershipOnRequest: Boolean
    isFeatured: Boolean
    autoNotification: Boolean
    isLeavingGroupDisabled: Boolean
    isAutoMembershipEnabled: Boolean
    isSubmitUpdatesEnabled: Boolean
    richDescription: SecureRichText
    introduction: String
    isIntroductionPublic: Boolean
    isHidden: Boolean
    welcomeMessage: String
    tags: [String]
    plugins: [Plugins]
    showMemberProfileFieldGuids: [String]
    requiredProfileFieldsMessage: String
    requiredProfileFieldGuids: [String]
}

input editGroupNotificationsInput {
    guid: String!
    userGuid: String
    notificationMode: notificationModeOptions
}

type editGroupNotificationsPayload {
    group: Group
}

type editGroupPayload {
    group: Group
}

input editGroupWidgetInput {
    guid: String!
    settings: [WidgetSettingInput]
    position: Int
}

type editGroupWidgetPayload {
    entity: Widget
}

input editNotificationsInput {
    guid: String!
    emailNotifications: Boolean
    emailNotificationsFrequency: Int
    newsletter: Boolean
    language: String
}

type editNotificationsPayload {
    user: User
}

input editPageInput {
    guid: String!
    title: String
    richDescription: SecureRichText
    accessId: Int
    tags: [String]
}

type editPagePayload {
    entity: Entity
}

input editPollInput {
    guid: String!
    title: String!
    choices: [String]!
    accessId: Int
}

type editPollPayload {
    entity: Entity!
}

input editProfileFieldInput {
    guid: String!
    accessId: Int!
    key: String!
    value: String!
}

type editProfileFieldPayload {
    user: User
}

input editRowInput {
    guid: String!
    parentGuid: String
    position: Int
    isFullWidth: Boolean
}

type editRowPayload {
    row: Row
}

input editSiteSettingInput {
    name: String
    description: String
    language: String
    isClosed: Boolean
    allowRegistration: Boolean
    defaultAccessId: Int
    googleAnalyticsId: String
    googleSiteVerification: String
    piwikUrl: String
    piwikId: String
    font: String
    colorPrimary: String
    colorSecondary: String
    colorHeader: String
    theme: String
    logo: Upload
    removeLogo: Boolean
    logoAlt: String
    likeIcon: String
    startPage: String
    startPageCms: String
    icon: Upload
    showIcon: Boolean
    removeIcon: Boolean
    menu: [MenuItemInput]
    menuState: MenuState
    numberOfFeaturedItems: Int
    enableFeedSorting: Boolean
    showExtraHomepageFilters: Boolean
    showLeader: Boolean
    showLeaderButtons: Boolean
    subtitle: String
    leaderImage: String
    showInitiative: Boolean
    initiativeTitle: String
    initiativeImage: String
    initiativeImageAlt: String
    initiativeDescription: String
    initiativeLink: String
    directLinks: [DirectLinkInput]
    footer: [FooterInput]
    tagCategories: [TagCategoryInput]
    showTagsInFeed: Boolean
    showTagsInDetail: Boolean
    profile: [ProfileItemInput]
    defaultEmailOverviewFrequency: String
    emailOverviewSubject: String
    emailOverviewTitle: String
    emailOverviewIntro: String
    emailOverviewEnableFeatured: Boolean
    emailOverviewFeaturedTitle: String
    emailNotificationShowExcerpt: Boolean
    showLoginRegister: Boolean
    customTagsAllowed: Boolean
    showUpDownVoting: Boolean
    enableSharing: Boolean
    showViewsCount: Boolean
    newsletter: Boolean
    cancelMembershipEnabled: Boolean
    showExcerptInNewsCard: Boolean
    commentsOnNews: Boolean
    eventExport: Boolean
    questionerCanChooseBestAnswer: Boolean
    statusUpdateGroups: Boolean
    subgroups: Boolean
    groupMemberExport: Boolean
    showRelatedItems: Boolean
    questionLockAfterActivity: Boolean
    questionLockAfterActivityLink: String
    redirects: [RedirectInput]
    """users with email adress in domain of directRegistrationDomains, can register even when allowRegistration is False"""
    directRegistrationDomains: [String]
    extraLanguages: [String]
    profileSections: [ProfileSectionInput]
    onboardingEnabled: Boolean
    searchEngineIndexingEnabled: Boolean
    onboardingForceExistingUsers: Boolean
    onboardingIntro: String
    limitedGroupAdd: Boolean
    cookieConsent: Boolean
    eventTiles: Boolean
    loginIntro: String
    profileSyncEnabled: Boolean
    profileSyncToken: String
    customCss: String
    walledGardenByIpEnabled: Boolean
    whitelistedIpRanges: [String]
    siteMembershipAcceptedIntro: String
    siteMembershipDeniedIntro: String
    idpId: String
    idpName: String
    autoApproveSSO: Boolean
    require2FA: Boolean
    flowEnabled: Boolean
    flowSubtypes: [String]
    flowAppUrl: String
    flowToken: String
    flowCaseId: Int
    flowUserGuid: String
    iconAlt: String
    favicon: Upload
    removeFavicon: Boolean
    commentWithoutAccountEnabled: Boolean
    kalturaVideoEnabled: Boolean
    kalturaVideoPartnerId: String
    kalturaVideoPlayerId: String
    fileDescriptionFieldEnabled: Boolean
    pdfCheckerEnabled: Boolean
}

type editSiteSettingPayload {
    siteSettings: SiteSettings
}

input editSubgroupInput {
    id: Int
    name: String
    members: [String]
}

type editSubgroupPayload {
    success: Boolean
}

input editTaskInput {
    guid: String
    state: String
}

type editTaskPayload {
    entity: Task
}

input editWidgetInput {
    guid: String!
    settings: [WidgetSettingInput]
    parentGuid: String
    position: Int
}

type editWidgetPayload {
    widget: Widget
}

type EmailOverview {
    frequency: Frequency
    tags: [String]
}

interface Entity {
    guid: String!
    status: Int
}

type EntityList {
    total: Int!
    edges: [Entity]
}

type Event implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    abstract: String
    description: String
    richDescription: SecureRichText
    hasChildren: Boolean
    children: [Event]
    slots: [String]
    slotsAvailable: [EventSlot]
    alreadySignedUpInSlot: Boolean
    parent: Event
    inGroup: Boolean
    group: Group
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    startDate: String
    endDate: String
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    location: String
    locationAddress: String
    locationLink: String
    source: String
    ticketLink: String
    maxAttendees: String
    rsvp: Boolean
    isFeatured: Boolean
    isHighlighted: Boolean
    attendEventWithoutAccount: Boolean
    isRecommended: Boolean
    featured: Featured
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    views: Int
    owner: User
    isAttending: String
    isAttendingParent: Boolean
    attendees(query: String, offset: Int, limit: Int, state: String, orderBy: AttendeeOrderBy, orderDirection: OrderDirection, isCheckedIn: Boolean): AttendeesList
    comments: [Comment]
    commentCount: Int
    isPinned: Boolean!
    qrAccess: Boolean
}

"""Show upcoming events or previous events"""
enum EventFilter {
    upcoming
    previous
}

"""attributes the attendees can be ordered by"""
enum AttendeeOrderBy {
    email
    name
    timeUpdated
    timeCheckedIn
}

type EventList {
    total: Int!
    edges: [Event]
}

type Featured {
    video: String
    videoTitle: String
    image: String
    positionY: Int
    alt: String
}

input FeaturedInput {
    video: String
    videoTitle: String
    image: Upload
    positionY: Int
    alt: String
}

type FileFolder implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    description: String
    richDescription: SecureRichText
    hasChildren: Boolean
    inGroup: Boolean
    group: Group
    parentFolder: FileFolder
    excerpt: String
    mimeType: String
    thumbnail: String
    url: String
    download: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    isFeatured: Boolean
    isHighlighted: Boolean
    isRecommended: Boolean
    featured: Featured
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
    isPinned: Boolean!
    size: Int
}

input FilterInput {
    name: String!
    values: [String]
}

"""Available Filters"""
type Filters {
    users(groupGuid: String): [UserFilter]
}

input followInput {
    """The guid of the entity to follow."""
    guid: String!

    """True for following, false for not following."""
    isFollowing: Boolean!
}

type followPayload {
    object: Entity!
}

input FooterInput {
    title: String!
    link: String!
}

enum Frequency {
    daily
    weekly
    twoweekly
    monthly
    never
}

type Group implements Entity {
    guid: String!
    status: Int
    name: String
    description: String
    richDescription: SecureRichText
    excerpt: String
    introduction: String
    isIntroductionPublic: Boolean
    icon: String
    featured: Featured
    url: String
    canEdit: Boolean!
    canChangeOwnership: Boolean
    isClosed: Boolean
    isHidden: Boolean
    isMembershipOnRequest: Boolean
    isFeatured: Boolean
    autoNotification: Boolean
    isLeavingGroupDisabled: Boolean
    isAutoMembershipEnabled: Boolean
    isSubmitUpdatesEnabled: Boolean
    membership: Membership
    memberRole: Role
    accessIds: [AccessId]
    defaultAccessId: Int
    tags: [String]
    memberCount: Int!
    members(
        q: String
        offset: Int
        limit: Int

        """Filter resultset on a specific subgroup."""
        inSubgroupId: Int

        """Filter resultset on users who are not in a specific subgroup."""
        notInSubgroupId: Int
    ): MemberList
    invite(q: String, offset: Int, limit: Int): InviteList
    invited(q: String, offset: Int, limit: Int): InviteList
    membershipRequests: MembershipRequestList
    plugins: [Plugins]
    subgroups: SubgroupList
    welcomeMessage: String
    widgets: [Widget]
    notificationMode: notificationModeOptions
    showMemberProfileFields: [ProfileItem]
    requiredProfileFields: [ProfileItem]
    requiredProfileFieldsMessage: String
}

"""Show all groups or only mine"""
enum GroupFilter {
    all
    mine
}

type GroupList {
    total: Int!
    edges: [Group]
}

type GroupNotificationItem {
    guid: String!
    name: String!
    """ If notification for group for user is enabled, the notification mode is used sending the notification by email. 'overview': notification in overview. 'direct': every notification a direct email """
    notificationMode: notificationModeOptions
}

type Invite {
    id: Int
    timeCreated: DateTime
    invited: Boolean!
    user: User
    email: String
}

type InviteList {
    total: Int!
    edges: [Invite]
}

input inviteToGroupInput {
    """The guid of the group to invite to."""
    guid: String!

    """A list of users to invite."""
    users: [InviteToGroupUser]

    """Directly add the users to the group without sending an invite"""
    directAdd: Boolean

    """Add all site users to group. Admin only and no invites wil be send!"""
    addAllUsers: Boolean
}

type inviteToGroupPayload {
    group: Group
}

"""An object with either the guid or the e-mailaddress of a user."""
input InviteToGroupUser {
    guid: String
    email: String
}

input joinGroupInput {
    """The guid of the group to join."""
    guid: String
}

type joinGroupPayload {
    group: Group
}

type KeyValueItem {
    key: String!
    value: String!
}

input leaveGroupInput {
    """The guid of the group to leave."""
    guid: String
}

type leaveGroupPayload {
    group: Group
}

input markAllAsReadInput {
    id: String
}

type markAllAsReadPayload {
    success: Boolean
}

input markAsReadInput {
    id: Int
}

type markAsReadPayload {
    success: Boolean
    notification: Notification
}

type Member {
    role: Role
    user: User
    email: String
}

type MemberList {
    total: Int!
    edges: [Member]
    fieldsInOverview: [UserListOverviewItem]
}

"""The type of membership."""
enum Membership {
    not_joined
    requested
    invited
    joined
}

type MembershipRequestList {
    total: Int!
    edges: [User]
}

type MenuItem {
    title: String!
    link: String
    guid: String
    children: [MenuItem]
    accessId: Int!
}

input MenuItemInput {
    title: String!
    link: String
    accessId: Int = 2

    """Temporary id of this menu item."""
    id: Int!

    """Temporary id of the parent menu item."""
    parentId: Int
}

input moveFileFolderInput {
    guid: String
    containerGuid: String
}

type moveFileFolderPayload {
    entity: Entity
}

input publishContentInput {
    guid: String
    revisionGuid: String
    description: String
}

type Mutation {
    editSiteSetting(input: editSiteSettingInput!): editSiteSettingPayload
    addEntity(input: addEntityInput!): addEntityPayload
    editEntity(input: editEntityInput!, draft: Boolean): editEntityPayload
    """Currently only implemented for events"""
    copyEntity(input: copyEntityInput!): copyEntityPayload
    deleteEntity(input: deleteEntityInput!): deleteEntityPayload
    toggleEntityArchived(guid: String!): archiveEntityPayload
    addFile(input: addFileInput!): addFilePayload
    editFileFolder(input: editFileFolderInput!): editFileFolderPayload
    moveFileFolder(input: moveFileFolderInput!): moveFileFolderPayload
    addPage(input: addPageInput!): addPagePayload
    editPage(input: editPageInput!, draft: Boolean): editPagePayload
    addRow(input: addRowInput!): addRowPayload
    editRow(input: editRowInput!): editRowPayload
    deleteRow(input: deleteRowInput!): deleteRowPayload
    addColumn(input: addColumnInput!): addColumnPayload
    editColumn(input: editColumnInput!): editColumnPayload
    deleteColumn(input: deleteColumnInput!): deleteColumnPayload
    addWidget(input: addWidgetInput!): addWidgetPayload
    editWidget(input: editWidgetInput!): editWidgetPayload
    deleteWidget(input: deleteWidgetInput!): deleteWidgetPayload
    editNotifications(input: editNotificationsInput!): editNotificationsPayload
    editGroupNotifications(input: editGroupNotificationsInput!): editGroupNotificationsPayload
    editEmailOverview(input: editEmailOverviewInput!): editEmailOverviewPayload
    bookmark(input: bookmarkInput!): bookmarkPayload
    vote(input: voteInput!): votePayload
    follow(input: followInput!): followPayload
    editAvatar(input: editAvatarInput!): editAvatarPayload
    editProfileField(input: editProfileFieldInput!): editProfileFieldPayload
    addImage(input: addImageInput!): addImagePayload
    addGroup(input: addGroupInput!): addGroupPayload
    editGroup(input: editGroupInput!): editGroupPayload
    addSubgroup(input: addSubgroupInput!): addSubgroupPayload
    editSubgroup(input: editSubgroupInput!): editSubgroupPayload
    deleteSubgroup(input: deleteSubgroupInput!): deleteSubgroupPayload

    """
    Join a group. In the case of a closed group a membership request will be send,
    in the case of an open group the user will be joined immediately.
    """
    joinGroup(input: joinGroupInput!): joinGroupPayload

    """Leave a group."""
    leaveGroup(input: leaveGroupInput!): leaveGroupPayload

    """Create an invitation to join a group."""
    inviteToGroup(input: inviteToGroupInput!): inviteToGroupPayload

    """Resend an invitation to join a group."""
    resendGroupInvitation(input: resendGroupInvitationInput!): resendGroupInvitationPayload

    """Remove an invitation to join a group."""
    deleteGroupInvitation(input: deleteGroupInvitationInput!): deleteGroupInvitationPayload

    """Accept a membership request to a group."""
    acceptMembershipRequest(input: acceptMembershipRequestInput!): acceptMembershipRequestPayload

    """Reject a membership request to a group."""
    rejectMembershipRequest(input: rejectMembershipRequestInput!): rejectMembershipRequestPayload

    """Send a message to the group members."""
    sendMessageToGroup(input: sendMessageToGroupInput!): sendMessageToGroupPayload

    """Accept a group invitation."""
    acceptGroupInvitation(input: acceptGroupInvitationInput!): acceptGroupInvitationPayload

    """Change the role of a user in a group."""
    changeGroupRole(input: changeGroupRoleInput!): changeGroupRolePayload
    editTask(input: editTaskInput!): editTaskPayload

    """Attend an event with state accept, waitinglist, maybe or reject """
    attendEvent(input: attendEventInput!): attendEventPayload
    attendEventWithoutAccount(input: attendEventWithoutAccountInput!): attendEventWithoutAccountPayload
    confirmAttendEventWithoutAccount(input: confirmAttendEventWithoutAccountInput!): confirmAttendEventWithoutAccountPayload
    editEventAttendee(input: editEventAttendeeInput!): editEventAttendeePayload
    deleteEventAttendees(input: deleteEventAttendeesInput!): deleteEventAttendeesPayload

    markAsRead(input: markAsReadInput!): markAsReadPayload
    markAllAsRead(input: markAllAsReadInput!): markAllAsReadPayload
    toggleBestAnswer(input: toggleBestAnswerInput!): toggleBestAnswerPayload
    toggleIsClosed(input: toggleIsClosedInput!): toggleIsClosedPayload
    toggleRequestDeleteUser(input: toggleRequestDeleteUserInput!): toggleRequestDeleteUserPayload
    reorder(input: reorderInput!): reorderPayload
    voteOnPoll(input: voteOnPollInput!): voteOnPollPayload
    addPoll(input: addPollInput!): addPollPayload
    editPoll(input: editPollInput!): editPollPayload

    """Send message to members of an event"""
    sendMessageToEvent(input: sendMessageToEventInput!): sendMessageToEventPayload

    """Send a message to a user."""
    sendMessageToUser(input: sendMessageToUserInput!): sendMessageToUserPayload
    addGroupWidget(input: addGroupWidgetInput!): addGroupWidgetPayload
    editGroupWidget(input: editGroupWidgetInput!): editGroupWidgetPayload
    deleteUser(input: deleteUserInput!): deleteUserPayload
    toggleUserRole(input: toggleUserRoleInput!): toggleUserRolePayload
    toggleUserIsBanned(input: toggleUserIsBannedInput!): toggleUserIsBannedPayload
    """Edit multiple users in bulk"""
    editUsers(input: editUsersInput!): editUsersPayload
    addSiteSettingProfileField(input: addSiteSettingProfileFieldInput!): addSiteSettingProfileFieldPayload
    editSiteSettingProfileField(input: editSiteSettingProfileFieldInput!): editSiteSettingProfileFieldPayload
    deleteSiteSettingProfileField(input: deleteSiteSettingProfileFieldInput!): deleteSiteSettingProfileFieldPayload
    """Create and send invitation by email to join a site."""
    inviteToSite(input: inviteToSiteInput!): inviteToSitePayload
    """Remove invitation to join a site."""
    revokeInviteToSite(input: revokeInviteToSiteInput!): revokeInviteToSitePayload
    """Handle access request"""
    handleSiteAccessRequest(input: handleSiteAccessRequestInput!): handleSiteAccessRequestPayload
    """Handle delete account request"""
    handleDeleteAccountRequest(input: handleDeleteAccountRequestInput!): handleDeleteAccountRequestPayload
    """User import step 1"""
    importUsersStep1(input: importUsersStep1Input!): importUsersStep1Payload
    """User import step 2, will be scheduled in background, performer will receive a mail with import results. """
    importUsersStep2(input: importUsersStep2Input!): importUsersStep2Payload
    """Add profileFieldValidator"""
    addSiteSettingProfileFieldValidator(input: addSiteSettingProfileFieldValidatorInput!): addSiteSettingProfileFieldValidatorPayload
    """Edit profileFieldValidator"""
    editSiteSettingProfileFieldValidator(input: editSiteSettingProfileFieldValidatorInput!): editSiteSettingProfileFieldValidatorPayload
    """Delete profileFieldValidator"""
    deleteSiteSettingProfileFieldValidator(input: deleteSiteSettingProfileFieldValidatorInput!): deleteSiteSettingProfileFieldValidatorPayload
    """Add attachment to content"""
    addAttachment(input: addAttachmentInput!): addAttachmentPayload
    """Toggle pinned on Entity"""
    toggleEntityIsPinned(input: toggleEntityIsPinnedInput!): toggleEntityIsPinnedPayload
    """Edit username"""
    editUserName(input: editUserNameInput!): editUserNamePayload
    addCommentWithoutAccount(input: addCommentWithoutAccountInput!): addCommentWithoutAccountPayload

    mergeTags(input: tagMergeInput!): [Tag]
    extractTagSynonym(input: tagMergeInput!): [Tag]
    signSiteAgreementVersion(input: signSiteAgreementVersionInput!): signSiteAgreementVersionPayload

    publishContent(input: publishContentInput!): publishContentPayload
}

type News implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    abstract: String
    description: String
    richDescription: SecureRichText
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    startDate: String
    endDate: String
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    source: String
    isFeatured: Boolean
    isHighlighted: Boolean
    isRecommended: Boolean
    featured: Featured
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    isBestAnswer: Boolean
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
    isPinned: Boolean!
    relatedItems: EntityList
    revision: Revision
}

type Notification {
    id: Int
    action: String
    performer: User
    entity: Entity
    container: Entity
    timeCreated: DateTime
    isUnread: Boolean
}

type NotificationsList {
    total: Int
    totalUnread: Int
    edges: [Notification]
}

type Option {
    value: String!
    label: String
}

type OptionInteger {
    value: Int!
    label: String
}

"""
Configure the way the entity list is ordered. lastAction is the last action that
is performed on the object, e.g. the latest comment that is placed.
"""
enum OrderBy {
    timeCreated
    timeUpdated
    timePublished
    lastAction
    title
    startDate
}

"""
Configure the type of sorting, either ascending (asc) or descending (desc).
"""
enum OrderDirection {
    asc
    desc
}

type Page implements Entity {
    guid: String!
    status: Int
    canEdit: Boolean!
    title: String
    description: String
    hasChildren: Boolean
    children: [Page]
    parent: Page
    menu: MenuItem
    richDescription: SecureRichText
    excerpt: String
    url: String
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    accessId: Int
    pageType: String
    rows: [Row]
    columns: [Column]
    widgets: [Widget]
    tags: [String]
    isPinned: Boolean!
    revision: Revision
}

"""The available plugins."""
enum Plugins {
    events
    blog
    discussion
    questions
    files
    wiki
    tasks
}

type Poll implements Entity {
    guid: String!
    status: Int
    canEdit: Boolean!
    title: String
    url: String
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    accessId: Int
    choices: [PollChoice]
    hasVoted: Boolean
    isPinned: Boolean!
}

type PollChoice {
    guid: String!
    text: String
    votes: Int
}

type ProfileItem {
    guid: String!
    key: String!
    name: String!
    value: String
    category: String
    isEditable: Boolean
    isFilterable: Boolean
    isFilter: Boolean
    isInOverview: Boolean
    isOnVcard: Boolean
    accessId: Int
    fieldType: String
    fieldOptions: [String]
    isInOnboarding: Boolean
    isMandatory: Boolean
    profileFieldValidator: ProfileFieldValidator
}

input ProfileItemInput {
    key: String!
    name: String!
    isFilter: Boolean!
    isInOverview: Boolean
    isOnVcard: Boolean
}

type ProfileOverviewItem {
    key: String!
    label: String!
    value: String
}

enum MatchStrategy {
    legacy
    any
    all
}

type Query {
    viewer: Viewer
    entity(
        guid: String
        username: String
        incrementViewCount: Boolean
    ): Entity
    search(
        q: String!
        containerGuid: String
        type: Type
        subtype: String
        dateFrom: String
        dateTo: String
        offset: Int
        limit: Int
        tagLists: [[String]]
        orderBy: SearchOrderBy
        orderDirection: OrderDirection
    ): SearchList
    searchJournal(
        dateTimeFrom: DateTime,
        dateTimeTo: DateTime,
        offset: Int
        limit: Int
    ): SearchJournal
    recommended(offset: Int, limit: Int): EntityList
    trending: [TrendingList]
    top: [TopItem]
    breadcrumb(guid: String): [Entity]
    files(containerGuid: String, filter: String, orderBy: String, orderDirection: String, offset: Int, limit: Int): EntityList
    groups(
        q: String
        filter: GroupFilter
        tags: [String]
        matchStrategy: MatchStrategy
        offset: Int
        limit: Int
    ): GroupList
    events(filter: EventFilter, containerGuid: String, offset: Int, limit: Int): EventList
    users(q: String!, offset: Int, limit: Int, filters: [FilterInput]): UserList
    members(groupGuid: String!, q: String, offset: Int, limit: Int, filters: [FilterInput]): MemberList
    entities(
        offset: Int
        limit: Int
        type: Type
        subtype: String
        subtypes: [String]
        containerGuid: String
        eventFilter: EventFilter
        tags: [String]
        tagLists: [[String]]
        matchStrategy: MatchStrategy
        orderBy: OrderBy
        orderDirection: OrderDirection
        isFeatured: Boolean
        sortPinned: Boolean
        statusPublished: [StatusPublished]
        userGuid: String
    ): EntityList
    notifications(offset: Int, limit: Int, unread: Boolean): NotificationsList
    activities(
        containerGuid: String
        offset: Int
        limit: Int
        tags: [String]
        tagLists: [[String]]
        matchStrategy: MatchStrategy
        groupFilter: [String]
        eventFilter: EventFilter
        subtypes: [String]
        orderBy: OrderBy
        orderDirection: OrderDirection
        sortPinned: Boolean
        statusPublished: [StatusPublished]
        userGuid: String
    ): ActivityList
    bookmarks(offset: Int, limit: Int, subtype: String): EntityList
    filters: Filters
    site: Site
    siteSettings: SiteSettings
    siteUsers(
        q: String
        role: String
        isDeleteRequested: Boolean
        isBanned: Boolean
        lastOnlineBefore: String
        memberSince: DateTime
        orderBy: String
        orderDirection: OrderDirection
        offset: Int
        limit: Int
    ): SiteUserList
    usersByBirthDate(profileFieldGuid: String!, futureDays: Int, offset: Int, limit: Int): SiteUserList
    siteStats: SiteStats
    tags: [Tag]
    siteAgreements: [SiteAgreement]
    revisions(
        objectGuid: String!
        offset: Int
        limit: Int
    ): RevisionList
}

type Question implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    abstract: String
    description: String
    richDescription: SecureRichText
    inGroup: Boolean
    group: Group
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    isFeatured: Boolean
    isHighlighted: Boolean
    isClosed: Boolean
    canChooseBestAnswer: Boolean
    isRecommended: Boolean
    featured: Featured
    canEdit: Boolean!
    canClose: Boolean
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    isBestAnswer: Boolean
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
    isPinned: Boolean!
    isLocked: Boolean!
}

input rejectMembershipRequestInput {
    """The guid of the user."""
    userGuid: String

    """The guid of the group."""
    groupGuid: String
}

type rejectMembershipRequestPayload {
    group: Group
}

input reorderInput {
    guid: String!
    sourcePosition: Int!
    destinationPosition: Int!
}

type reorderPayload {
    container: Entity!
}

input resendGroupInvitationInput {
    """The id of the invitation to resend."""
    id: Int
}

type resendGroupInvitationPayload {
    group: Group
}

type ContentVersion {
    richDescription: SecureRichText
}

type Revision {
    object: String!
    description: String
    content: ContentVersion
    timeCreated: DateTime
    timeUpdated: DateTime
}

"""The type of role."""
enum Role {
    pending
    owner
    admin
    member
    removed
}

enum MenuState {
    normal
    compact
}

type Row {
    guid: String!
    containerGuid: String!
    position: Int!
    parentGuid: String!
    isFullWidth: Boolean!
    canEdit: Boolean!
}

type SearchList {
    total: Int!
    totals: [SearchTotal]
    edges: [Entity]
}

type SearchJournal {
    total: Int
    edges: [SearchJournalSummary]
}

type SearchJournalSummary {
    query: String
    count: Int
}

"""
Configure the way the search results are ordered. When not provided, sorting is done on search score (most relevant first).
"""
enum SearchOrderBy {
    title
    timeCreated
    timePublished
}

type SearchTotal {
    subtype: String!
    total: Int!
}

input sendMessageToGroupInput {
    """The guid of the group to send the message to."""
    guid: String

    """The subject of the message."""
    subject: String

    """The message to send."""
    message: String

    """Is this a test message (send only to current user)"""
    isTest: Boolean

    """An (optional) list of recipients to send the message to."""
    recipients: [String]

    """ ID of a subgroup to send a message to """
    subGroup: Int

    """
    An (optional) parameter for sending the message to all members of the group.
    """
    sendToAllMembers: Boolean

    """
    An (optional) parameter for sending a copy of the message to the sender
    """
    sendCopyToSender: Boolean
}

type sendMessageToGroupPayload {
    group: Group
}

input sendMessageToUserInput {
    """The guid of the user to send the message to."""
    guid: String

    """The subject of the message."""
    subject: String

    """The message to send."""
    message: String
    sendCopyToSender: Boolean
}

type sendMessageToUserPayload {
    success: Boolean
}

input sendMessageToEventInput {
    """The guid of the event"""
    guid: String!

    subject: String!
    message: String!

    isTest: Boolean
    sendToAttendees: Boolean
    sendCopyToSender: Boolean
}

type sendMessageToEventPayload {
    success: Boolean!
    messageCount: Int!
}

"""The current site"""
type Site {
    guid: String!
    name: String!
    theme: String!
    menu: [MenuItem]
    menuState: MenuState
    profile: [ProfileItem]
    achievementsEnabled: Boolean!
    cancelMembershipEnabled: Boolean!
    footer: [MenuItem]
    directLinks: [DirectLink]
    accessIds: [AccessId]
    defaultAccessId: Int!
    language: String!
    logo: String
    logoAlt: String
    icon: String
    iconAlt: String
    showIcon: Boolean!
    startpage: String
    showLeader: Boolean!
    showLeaderButtons: Boolean!
    subtitle: String
    leaderImage: String
    showInitiative: Boolean!
    initiativeTitle: String
    initiativeImage: String
    initiativeImageAlt: String
    initiativeDescription: String
    initiatorLink: String
    style: Style!
    customTagsAllowed: Boolean!
    tagCategories: [TagCategory]!
    activityFilter: ActivityFilter
    showExtraHomepageFilters: Boolean!
    showTagsInFeed: Boolean!
    showTagsInDetail: Boolean!
    usersOnline: Int!
    profileSections: [ProfileSection]
    profileFields: [ProfileItem]
    onboardingEnabled: Boolean!
    onboardingIntro: String
    editUserNameEnabled: Boolean!
    commentWithoutAccountEnabled: Boolean!
    questionLockAfterActivity: Boolean!
    questionLockAfterActivityLink: String
    fileDescriptionFieldEnabled: Boolean
    pdfCheckerEnabled: Boolean!
}

type SiteSettings {
    name: String!
    description: String
    language: String!
    languageOptions: [Option]
    isClosed: Boolean!
    allowRegistration: Boolean!
    defaultAccessId: Int!
    defaultAccessIdOptions: [OptionInteger]
    googleAnalyticsId: String
    googleSiteVerification: String
    piwikUrl: String
    piwikId: String
    oidcProviders: [String]
    oidcProviderOptions: [Option]
    font: String
    fontOptions: [Option]
    colorPrimary: String
    colorSecondary: String
    colorHeader: String
    theme: String
    themeOptions: [Option]
    logo: String
    logoAlt: String
    likeIcon: String
    startPage: String
    startPageOptions: [Option]
    startPageCms: String
    startPageCmsOptions: [Option]
    icon: String
    showIcon: Boolean!
    menu: [MenuItem]
    menuState: MenuState
    numberOfFeaturedItems: Int
    enableFeedSorting: Boolean!
    showExtraHomepageFilters: Boolean!
    showLeader: Boolean!
    showLeaderButtons: Boolean!
    subtitle: String
    leaderImage: String
    showInitiative: Boolean!
    initiativeTitle: String
    initiativeImage: String
    initiativeImageAlt: String
    initiativeDescription: String
    initiativeLink: String
    directLinks: [DirectLink]
    footer: [MenuItem]
    defaultEmailOverviewFrequency: String
    defaultEmailOverviewFrequencyOptions: [Option]
    emailOverviewSubject: String
    emailOverviewTitle: String
    emailOverviewIntro: String
    emailOverviewEnableFeatured: Boolean!
    emailOverviewFeaturedTitle: String
    emailNotificationShowExcerpt: Boolean!
    tagCategories: [TagCategory]!
    showTagsInFeed: Boolean!
    showTagsInDetail: Boolean!
    profile: [ProfileItem]
    showLoginRegister: Boolean!
    customTagsAllowed: Boolean!
    showUpDownVoting: Boolean!
    enableSharing: Boolean!
    showViewsCount: Boolean!
    newsletter: Boolean!
    cancelMembershipEnabled: Boolean!
    showExcerptInNewsCard: Boolean!
    commentsOnNews: Boolean!
    eventExport: Boolean!
    questionerCanChooseBestAnswer: Boolean!
    statusUpdateGroups: Boolean!
    subgroups: Boolean!
    groupMemberExport: Boolean!
    showRelatedItems: Boolean!
    questionLockAfterActivity: Boolean!
    questionLockAfterActivityLink: String
    redirects: [Redirect]
    directRegistrationDomains: [String]
    extraLanguages: [String]
    profileSections: [ProfileSection]
    exportableUserFields: [ExportableField]
    exportableContentTypes: [Option]
    profileFields: [ProfileItem]
    limitedGroupAdd: Boolean!
    onboardingEnabled: Boolean!
    onboardingForceExistingUsers: Boolean!
    onboardingIntro: String
    siteInvites: SiteInviteList
    siteAccessRequests: SiteAccessRequestList
    cookieConsent: Boolean!
    eventTiles: Boolean!
    loginIntro: String
    roleOptions: [Option]
    deleteAccountRequests: DeleteAccountRequestList
    profileSyncEnabled: Boolean!
    profileSyncToken: String
    customCss: String
    walledGardenByIpEnabled: Boolean!
    whitelistedIpRanges: [String]
    siteMembershipAcceptedIntro: String
    siteMembershipDeniedIntro: String
    idpId: String
    idpName: String
    autoApproveSSO: Boolean
    require2FA: Boolean
    searchEngineIndexingEnabled: Boolean!
    profileFieldValidators: [ProfileFieldValidator]
    flowEnabled: Boolean!
    flowSubtypes: [String]
    flowAppUrl: String
    flowToken: String
    flowCaseId: Int
    flowUserGuid: String
    iconAlt: String
    editUserNameEnabled: Boolean!
    favicon: String
    commentWithoutAccountEnabled: Boolean!
    kalturaVideoEnabled: Boolean!
    kalturaVideoPartnerId: String
    kalturaVideoPlayerId: String
    fileDescriptionFieldEnabled: Boolean
    pdfCheckerEnabled: Boolean!
}

type StatsItem {
    key: String!
    name: String!
    value: String
}

type StatusUpdate implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    description: String
    richDescription: SecureRichText
    inGroup: Boolean
    group: Group
    excerpt: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFollowing: Boolean
    canBookmark: Boolean
    hasVoted: Boolean
    votes: Int
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
    isPinned: Boolean!
}

type Style {
    font: String
    colorPrimary: String
    colorSecondary: String
    colorHeader: String
}

type Subgroup {
    id: Int
    name: String
    members: [User]
}

type SubgroupList {
    total: Int!
    edges: [Subgroup]
}

type TagCategory {
    name: String!
    values: [String]
}

input TagCategoryInput {
    name: String!
    values: [String]
}

type Task implements Entity {
    guid: String!
    status: Int
    subtype: String
    title: String
    description: String
    richDescription: SecureRichText
    inGroup: Boolean
    group: Group
    state: String
    excerpt: String
    thumbnail: String
    url: String
    tags: [String]
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    canEdit: Boolean!
    canComment: Boolean
    canVote: Boolean
    accessId: Int
    writeAccessId: Int
    isFollowing: Boolean
    hasVoted: Boolean
    votes: Int
    views: Int
    owner: User
    comments: [Comment]
    commentCount: Int
}

input toggleBestAnswerInput {
    guid: String
}

type toggleBestAnswerPayload {
    entity: Question!
}

input toggleIsClosedInput {
    guid: String
}

type toggleIsClosedPayload {
    entity: Question!
}

input toggleRequestDeleteUserInput {
    guid: String!
}

type toggleRequestDeleteUserPayload {
    viewer: Viewer
}

type TopItem {
    user: User
    likes: Int
}

type TrendingList {
    tag: String
    likes: Int
}

type RevisionList {
    total: Int!
    edges: [Revision]
}

"""The type of entity"""
enum Type {
    user
    group
    object
    page
    wiki
}

"""
The `Upload` special type represents a file to be uploaded in the same HTTP request as specified by
[graphql-multipart-request-spec](https://github.com/jaydenseric/graphql-multipart-request-spec).
"""
scalar Upload

type User implements Entity {
    guid: String!
    status: Int
    username: String
    name: String
    email: String
    emailNotifications: Boolean
    emailNotificationsFrequency: Int
    getsNewsletter: Boolean
    emailOverview: EmailOverview
    profile: [ProfileItem]
    vcard: [ProfileItem]
    missingProfileFields(groupGuid: String!): [ProfileItem]
    fieldsInOverview(groupGuid: String): [ProfileOverviewItem]
    stats: [StatsItem]
    groupNotifications: [GroupNotificationItem]
    icon: String
    url: String
    canEdit: Boolean!
    requestDelete: Boolean
    roles: [String]
    language: String
    languageOptions: [Option]
    lastOnline: String
    memberSince: DateTime
}

type UserFilter {
    name: String!
    fieldType: String!
    label: String!
    keys: [String!]
}

type UserFilterCount {
    name: String!
    values: [UserFilterItemCount]
}

type UserFilterItemCount {
    key: String!
    count: Int
}

type UserList {
    total: Int!
    filterCount: [UserFilterCount]
    edges: [User]
    fieldsInOverview: [UserListOverviewItem]
}

type UserListOverviewItem {
    key: String!
    label: String
}

"""The current viewer"""
type Viewer {
    guid: String!
    loggedIn: Boolean!
    isSubEditor: Boolean!
    isAdmin: Boolean!
    isBanned: Boolean!
    has2faEnabled: Boolean!
    tags: [String]
    canWriteToContainer(containerGuid: String, type: Type, subtype: String): Boolean!
    user: User
}

input voteInput {
    """The guid of the entity to vote on."""
    guid: String!

    """1 for upvote, -1 for downvote, 0 for deleting."""
    score: Int!
}

input voteOnPollInput {
    guid: String!
    response: String!
}

type voteOnPollPayload {
    entity: Entity!
}

type votePayload {
    object: Entity!
}

type Widget {
    guid: String!
    containerGuid: String!
    type: String!
    position: Int!
    settings: [WidgetSetting]
    canEdit: Boolean!
    parentGuid: String!
}

type WidgetSetting {
    key: String!
    value: String
    richDescription: SecureRichText
}

input WidgetSettingInput {
    key: String
    value: String
    richDescription: SecureRichText
}

type Wiki implements Entity {
    guid: String!
    status: Int
    subtype: String
    canEdit: Boolean!
    title: String
    abstract: String
    description: String
    hasChildren: Boolean
    children: [Wiki]
    parent: Wiki
    richDescription: SecureRichText
    excerpt: String
    url: String
    timeCreated: DateTime
    timeUpdated: DateTime
    timePublished: DateTime
    statusPublished: StatusPublished
    scheduleArchiveEntity: DateTime
    scheduleDeleteEntity: DateTime
    accessId: Int
    writeAccessId: Int
    isBookmarked: Boolean
    isFeatured: Boolean
    canBookmark: Boolean
    tags: [String]
    inGroup: Boolean
    group: Group
    owner: User
    isPinned: Boolean!
    featured: Featured
    revision: Revision
}

type SiteAccessRequest {
    name: String!
    email: String!
}

type SiteAccessRequestList {
    edges: [SiteAccessRequest]
}

type DeleteAccountRequestList {
    edges: [User]
}

input handleSiteAccessRequestInput {
    email: String!
    """Set true to accept or false to deny."""
    accept: Boolean!
    """Silently deny or accept. When set to true no email will be send to the user."""
    silent: Boolean
}

type handleSiteAccessRequestPayload {
    success: Boolean
}

input handleDeleteAccountRequestInput {
    guid: String!
    """Set true to accept or false to deny."""
    accept: Boolean!
}

type handleDeleteAccountRequestPayload {
    success: Boolean
}

input deleteUserInput {
    guid: String!
}

input toggleUserRoleInput {
    guid: String!
    role: String!
}

input toggleUserIsBannedInput {
    guid: String!
}

enum editUserAction {
    ban,
    unban
}

input editUsersInput {
    guids: [String]!
    action: editUserAction!
}

type deleteUserPayload {
    success: Boolean
}

type toggleUserRolePayload {
    success: Boolean
}

type editUsersPayload {
    success: Boolean
}

type toggleUserIsBannedPayload {
    success: Boolean
}

input inviteToSiteInput {

    """A list of email addresses to invite to site."""
    emailAddresses: [String!]

    """Message in email sent with invite"""
    message: String
}

type inviteToSitePayload {
    success: Boolean
}

input revokeInviteToSiteInput {

    """A list of email addresses to revoke invite for."""
    emailAddresses: [String!]
}

type revokeInviteToSitePayload {
    success: Boolean
}

type SiteInvite {
    email: String
}

type SiteInviteList {
    edges: [SiteInvite]
}

type SiteUserList {
    total: Int!
    edges: [User]
}

input importUsersStep1Input {

    """A list of email addresses to revoke invite for."""
    usersCsv: Upload!
}

type importUsersStep1Payload {
    """
    - csvColumns, columns of the uploaded csv
    - userFields, fields of users
    - accessIds, integers of access level for field
    """
    importId: String!
    csvColumns: [String]
    userFields: [Option]
    accessIdOptions: [OptionInteger]
}

input importUsersStep2Input {

    """Start a background process for creating/updating users"""
    importId: String!
    fields: [ImportUserFieldInput!]
}

type importUsersStep2Payload {
    success: Boolean
}

input ImportUserFieldInput {
    csvColumn: String!
    userField: String!
    accessId: Int
    forceAccess: Boolean
}

enum notificationModeOptions {
    disable,
    overview,
    direct
}

input addSiteSettingProfileFieldInput {
    key: String
    name: String!
    isEditable: Boolean
    isFilter: Boolean
    isInOverview: Boolean
    fieldType: String!
    fieldOptions: [String]
    isInOnboarding: Boolean
    isOnVcard: Boolean
    isMandatory: Boolean
    profileFieldValidatorId: String
}

type addSiteSettingProfileFieldPayload {
    profileItem: ProfileItem
}

input editSiteSettingProfileFieldInput {
    guid: String!
    name: String
    key: String
    isEditable: Boolean
    isFilter: Boolean
    isInOverview: Boolean
    isOnVcard: Boolean
    fieldOptions: [String]
    isInOnboarding: Boolean
    isMandatory: Boolean
    profileFieldValidatorId: String
}

type editSiteSettingProfileFieldPayload {
    profileItem: ProfileItem
}

input deleteSiteSettingProfileFieldInput {
    guid: String!
}

type deleteSiteSettingProfileFieldPayload {
    success: Boolean
}

type ProfileSection {
    name: String!
    profileFieldGuids: [String]
}

input ProfileSectionInput {
    name: String!
    profileFieldGuids: [String]
}

type ExportableField {
    field_type: String!
    field: String!
    label: String!
}

type Redirect {
    source: String!
    destination: String!
}

"""source and destination must start with /"""
input RedirectInput {
    source: String!
    destination: String!
}

type SiteStats {
    dbUsage: Float!
    fileDiskUsage: Float!
}

type SiteAgreement {
  id: String!
  name: String!
  description: String
  accepted: Boolean!
  versions: [SiteAgreementVersion]
}

type SiteAgreementVersion {
  id: String!
  version: String!
  document: String!
  accepted: Boolean!
  accepted_by: String
  accepted_date: DateTime
}

input ProfileFieldValidatorInput {
    type: ProfileFieldValidatorType!
    name: String!
    validationString: String
    validationListFile: Upload
}

type ProfileFieldValidator {
    id: String!
    type: ProfileFieldValidatorType!
    name: String!
    validationString: String
    validationList: [String]
}

enum ProfileFieldValidatorType {
    inList
}

input addSiteSettingProfileFieldValidatorInput {
    type: ProfileFieldValidatorType!
    name: String!
    validationString: String
    validationListFile: Upload
}

input editSiteSettingProfileFieldValidatorInput {
    id: String!
    name: String
    validationString: String
    validationListFile: Upload
}

input deleteSiteSettingProfileFieldValidatorInput {
    id: String!
}

type addSiteSettingProfileFieldValidatorPayload {
    profileFieldValidator: ProfileFieldValidator
}

type editSiteSettingProfileFieldValidatorPayload {
    profileFieldValidator: ProfileFieldValidator
}

type deleteSiteSettingProfileFieldValidatorPayload {
    success: Boolean!
}

type Attachment {
    id: String
    mimeType: String
    url: String
    name: String
}

input addAttachmentInput {
    contentGuid: String @deprecated(reason: "attachment relations are made through references in the text")
    file: Upload!
}

type addAttachmentPayload {
    attachment: Attachment
}

input toggleEntityIsPinnedInput {
    guid: String!
}

type toggleEntityIsPinnedPayload {
    success: Boolean
}


input editUserNameInput {
    guid: String!
    name: String
}

type editUserNamePayload {
    user: User
}

input addCommentWithoutAccountInput {
    containerGuid: String!
    name: String!
    email: String!
    richDescription: SecureRichText!
}

type addCommentWithoutAccountPayload {
    success: Boolean
}

input signSiteAgreementVersionInput {
  id: String!
  accept: Boolean!
}

type signSiteAgreementVersionPayload {
  siteAgreementVersion: SiteAgreementVersion
}
type publishContentPayload {
    success: Boolean
}
