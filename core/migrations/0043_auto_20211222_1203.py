# Generated by Django 3.2.6 on 2021-12-22 11:03

import core.models.attachment
import django.db.models.deletion
import django.utils.timezone
import uuid

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models

def forward_merge_attachments(apps, schema_editor):
    Attachment = apps.get_model('core.Attachment')
    EntityAttachment = apps.get_model('core.EntityAttachment')
    GroupAttachment = apps.get_model('core.GroupAttachment')
    CommentAttachment = apps.get_model('core.CommentAttachment')
    ContentType = apps.get_model('contenttypes.contenttype')

    def create_new_attachment(Attachment, content_type, old):
        Attachment.objects.create(
            id=old.pk, # keep id's the same or url's will fail
            name=old.name,
            upload=old.upload,
            mime_type=old.mime_type,
            size=old.size,
            created_at=old.created_at,
            attached_object_id=old.attached.pk,
            attached_content_type=content_type,
        )

    try:
        content_type = ContentType.objects.get(app_label='core', model='entity')
        for old in EntityAttachment.objects.all():
            create_new_attachment(Attachment, content_type, old)
    except ObjectDoesNotExist:
        pass

    try:
        content_type = ContentType.objects.get(app_label='core', model='group')
        for old in GroupAttachment.objects.all():
            create_new_attachment(Attachment, content_type, old)
    except ObjectDoesNotExist:
        pass

    try:
        content_type = ContentType.objects.get(app_label='core', model='comment')
        for old in CommentAttachment.objects.all():
            create_new_attachment(Attachment, content_type, old)
    except ObjectDoesNotExist:
        pass


def reverse_merge_attachments(apps, schema_editor):
    Attachment = apps.get_model('core.Attachment')
    EntityAttachment = apps.get_model('core.EntityAttachment')
    GroupAttachment = apps.get_model('core.GroupAttachment')
    CommentAttachment = apps.get_model('core.CommentAttachment')

    def create_old_attachment(Model, attachment):
        AttachedModel = apps.get_model(attachment.attached_content_type.app_label, attachment.attached_content_type.model)
        attached = AttachedModel.objects.get(id=attachment.attached_object_id)

        Model.objects.create(
            id=attachment.pk,
            name=attachment.name,
            upload=attachment.upload,
            mime_type=attachment.mime_type,
            size=attachment.size,
            created_at=attachment.created_at,
            attached=attached,
        )

    for attachment in Attachment.objects.all():
        if attachment.attached_content_type.model == 'entity':
            create_old_attachment(EntityAttachment, attachment)
        elif attachment.attached_content_type.model == 'group':
            create_old_attachment(GroupAttachment, attachment)
        elif attachment.attached_content_type.model == 'comment':
            create_old_attachment(CommentAttachment, attachment)
        else:
            print(f"Warning: lost attachment for type {attachment.attached_content_type.model}")


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0042_menu_access_20211116_1817'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=256)),
                ('upload', models.FileField(blank=True, max_length=512, null=True, upload_to=core.models.attachment.attachment_path)),
                ('mime_type', models.CharField(blank=True, max_length=100, null=True)),
                ('size', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('attached_object_id', models.UUIDField(blank=True, null=True)),
                ('attached_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(forward_merge_attachments, reverse_merge_attachments),
        migrations.DeleteModel(
            name='CommentAttachment',
        ),
        migrations.DeleteModel(
            name='EntityAttachment',
        ),
        migrations.DeleteModel(
            name='GroupAttachment',
        ),
    ]
