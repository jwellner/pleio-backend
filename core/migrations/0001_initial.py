# Generated by Django 3.0.7 on 2020-07-14 14:34

import core.models.shared
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField(default=uuid.uuid4)),
                ('key', models.CharField(choices=[('bookmarked', 'Bookmarked'), ('voted', 'Voted'), ('followed', 'Followed')], default='bookmarked', max_length=16)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('rich_description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('object_id', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('read_access', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, default=core.models.shared.read_access_default, size=None)),
                ('write_access', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, default=core.models.shared.write_access_default, size=None)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='EntityView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='EntityViewCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('views', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rich_description', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('introduction', models.TextField(default='')),
                ('welcome_message', models.TextField(default='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_featured', models.BooleanField(default=False)),
                ('featured_video', models.CharField(blank=True, max_length=256, null=True)),
                ('featured_position_y', models.IntegerField(null=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('is_membership_on_request', models.BooleanField(default=False)),
                ('is_leaving_group_disabled', models.BooleanField(default=False)),
                ('is_auto_membership_enabled', models.BooleanField(default=False)),
                ('auto_notification', models.BooleanField(default=False)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('plugins', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GroupInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=36)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member'), ('pending', 'Pending')], default='member', max_length=10)),
                ('enable_notification', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['group'],
            },
        ),
        migrations.CreateModel(
            name='ProfileField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('category', models.CharField(blank=True, max_length=512, null=True)),
                ('field_type', models.CharField(choices=[('select_field', 'SelectField'), ('date_field', 'DateField'), ('html_field', 'HTMLField'), ('multi_select_field', 'MultiSelectField'), ('text_field', 'TextField')], default='text_field', max_length=24)),
                ('field_options', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=512), blank=True, default=list, size=None)),
                ('is_editable_by_user', models.BooleanField(default=True)),
                ('is_filter', models.BooleanField(default=False)),
                ('is_in_overview', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('value', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Please provide valid JSON data', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subgroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_online', models.DateTimeField(blank=True, null=True)),
                ('receive_notification_email', models.BooleanField(default=False)),
                ('overview_email_interval', models.CharField(blank=True, choices=[('never', 'Never'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default=None, max_length=10, null=True)),
                ('overview_email_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('overview_email_last_received', models.DateTimeField(blank=True, null=True)),
                ('receive_newsletter', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=4096)),
                ('read_access', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, default=core.models.shared.read_access_default, size=None)),
                ('write_access', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, default=core.models.shared.write_access_default, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('settings', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(help_text='Please provide valid JSON data'), blank=True, default=list, size=None)),
                ('position', models.IntegerField()),
                ('type', models.CharField(max_length=64)),
                ('column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='cms.Column')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='core.Group')),
            ],
        ),
    ]
